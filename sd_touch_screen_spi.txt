/* USER CODE BEGIN Header */
/**
  ******************************************************************************
  * @file           : main.c
  * @brief          : Main program body
  ******************************************************************************
  * @attention
  *
  * Copyright (c) 2024 STMicroelectronics.
  * All rights reserved.
  *
  * This software is licensed under terms that can be found in the LICENSE file
  * in the root directory of this software component.
  * If no LICENSE file comes with this software, it is provided AS-IS.
  *
  ******************************************************************************
  */
/* USER CODE END Header */
/* Includes ------------------------------------------------------------------*/
#include "main.h"
#include "fatfs.h"
#include "stdio.h"
#include "fatfs_sd.h"
#include "string.h"
#include "stdbool.h"
#include "ili9341.h"
/* Private includes ----------------------------------------------------------*/
/* USER CODE BEGIN Includes */

/* USER CODE END Includes */

/* Private typedef -----------------------------------------------------------*/
/* USER CODE BEGIN PTD */
int adc_data;
char analog[5];
char line1[32],line2[32];
	
FILINFO fileInfo;
FATFS fs;
FIL fil;
FRESULT   res;
  

/* USER CODE END PTD */

/* Private define ------------------------------------------------------------*/
/* USER CODE BEGIN PD */
void de_sd(char *string){
			if (f_mount(&fs, "", 0) != FR_OK)
				{
							printf("\r ***mount write eerrrr**\r");
				}else{			
					printf("\r-mount:ok || ");		
				}
				
				if(f_unlink(string)== FR_OK){

				 printf("file2.txt removed successfully...\n");
				}
				f_close(&fil);
}
void write_sd(char *file_name,char *line){

	 if (f_mount(&fs, "", 0) != FR_OK)
    {
					printf("\r ***mount write eerrrr**\r");
    }else{			
			printf("\r-mount:ok || ");		
		}
		
		
		
	if ((f_open(&fil, file_name, FA_OPEN_ALWAYS | FA_WRITE | FA_READ)) != FR_OK)
    {
					printf("\ropen err\r");
    }else{
			printf("open:ok ||");
		}

		if (f_lseek(&fil, fil.fsize) != FR_OK)
    {
				printf("\r**lseek eerrrr**\r");
    }else{
		
			printf("lseek:ok || ");
		}

			while (f_puts(line, &fil) == NULL) {
					printf("\r---");
					HAL_Delay(1000);
			}
			printf("puts:ok || ");


if (f_close(&fil) != FR_OK)
    {
			printf("\r**close err**\r");
		}else{
			printf("close:ok \r ");
		
		}
	
	  printf("----------write succes ------------\r");
 

}

void read_sd(char *file_name){
	
	
	 if (f_mount(&fs, "", 0) != FR_OK)
    {
					printf("mount eerrrr\r");
    }else{
					printf("mount success  \r");
		
		}

    // M? t?p tin
    if (f_open(&fil, file_name, FA_READ) != FR_OK)
    {
					printf("open errrr\r");
    }else{
		
					printf("open for read success \r");
		}

    // Ð?c d? li?u t? t?p tin
    char bufe[100];
    UINT bytesRead;


					if (f_read(&fil, bufe, sizeof(bufe) - 1, &bytesRead) != FR_OK)
						{
									printf("read err");
						}else{
									printf("read success \r");
						}
		
		
    
		
    if (f_close(&fil) != FR_OK)
    {
         printf("clerr");
    }else{
		
					printf(" close file \r");
		}
		
		printf(bufe);
}
void draw_image_sd(char *file_name){


	
	 if (f_mount(&fs, "", 0) != FR_OK)
    {
					printf("mount eerrrr\r");
    }else{
					printf("mount success  \r");
		
		}

    // M? t?p tin
    if (f_open(&fil, file_name, FA_READ) != FR_OK)
    {
					printf("open errrr\r");
    }else{
		
					printf("open for read success \r");
		}

    // Ð?c d? li?u t? t?p tin
    uint16_t buf[100];
   /*
		while (f_gets(bufe, sizeof(bufe), &fil) != NULL) {
  
			 ILI9341_DrawPixel(uint16_t x, uint16_t y, uint16_t color);
}*/
	
	  uint16_t pixel;
    uint16_t x, y;
    for (y = 0; y < 320; y++) {
        for (x = 0; x < 240; x++) {
            if (f_read(&fil, buf, sizeof(buf), NULL) != sizeof(buf)) {
                // X? lý l?i không th? d?c d? d? li?u t? file
                break;
            }

            // Chuy?n d?i t? d?ng byte thành d?ng uint16_t
            pixel = ((uint16_t)buf[0] << 8) | buf[1];

            // V? pixel v?i giá tr? color t? d? li?u d?c du?c
            ILI9341_DrawPixel(x, y, pixel);
        }
    }
		
		
		
    if (f_close(&fil) != FR_OK)
    {
         printf("clerr");
    }else{
		
					printf(" close file \r");
		}
		
	
}

/* USER CODE END PD */

/* Private macro -------------------------------------------------------------*/
/* USER CODE BEGIN PM */

/* USER CODE END PM */

/* Private variables ---------------------------------------------------------*/
SPI_HandleTypeDef hspi1;

UART_HandleTypeDef huart1;

/* USER CODE BEGIN PV */


#if defined(__GNUC__)
int _write(int fd, char * ptr, int len) {
  HAL_UART_Transmit( & huart1, (uint8_t * ) ptr, len, HAL_MAX_DELAY);
  return len;
}
#elif defined(__ICCARM__)
#include "LowLevelIOInterface.h"
 
size_t __write(int handle,
  const unsigned char * buffer, size_t size) {
  HAL_UART_Transmit( & huart1, (uint8_t * ) buffer, size, HAL_MAX_DELAY);
  return size;
}
#elif defined(__CC_ARM)
int fputc(int ch, FILE * f) {
  HAL_UART_Transmit( & huart1, (uint8_t * ) & ch, 1, HAL_MAX_DELAY);
  return ch;
}
#endif
/* USER CODE END PV */

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
static void MX_GPIO_Init(void);
static void MX_USART1_UART_Init(void);
static void MX_SPI1_Init(void);
/* USER CODE BEGIN PFP */

  
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

/* USER CODE END 0 */

/**
  * @brief  The application entry point.
  * @retval int
  */
	char buf[100];
	void bufcl(void)
{
for(int i=0; i<1024; i++)
	{
	buf[i]='\0';
	}

}
bool remove_file(char *a){

 if (f_mount(&fs, "", 1) != FR_OK) {
        // X? lý l?i khi không th? mount h? th?ng t?p tin
        return false;
    }else {return 0;}

    if (f_unlink(a) != FR_OK) {
        // X? lý l?i khi không th? xóa t?p
        return false;
    }else {return 0;}

    if ((f_stat(a, &fileInfo)) == FR_OK) {
        // X? lý l?i khi t?p v?n t?n t?i sau khi xóa
			
        return true;
    }
		
      
}
int main(void)
{
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();

  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();

  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
  MX_USART1_UART_Init();
  MX_SPI1_Init();
  MX_FATFS_Init();
  /* USER CODE BEGIN 2 */

printf("aassd");
ILI9341_Unselect(); 
	
	ILI9341_TouchUnselect();
	ILI9341_Init();

 ILI9341_FillScreen(ILI9341_WHITE);

//write_sd("d.txt","buf");


  /* USER CODE END 2 */
//read_sd("te.bin");
  /* Infinite loop */
	  
  /* USER CODE BEGIN WHILE */
	// 
	printf("bat dau");
	draw_image_sd("creen.bin");
	printf("het");
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  }
  /* USER CODE END 3 */
}

/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
  {
    Error_Handler();
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
  {
    Error_Handler();
  }
}

/**
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{

  /* USER CODE BEGIN SPI1_Init 0 */

  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
  hspi1.Init.Mode = SPI_MODE_MASTER;
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
  hspi1.Init.NSS = SPI_NSS_SOFT;
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
  hspi1.Init.CRCPolynomial = 10;
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}

/**
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{

  /* USER CODE BEGIN USART1_Init 0 */

  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
  huart1.Init.BaudRate = 9600;
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
  huart1.Init.StopBits = UART_STOPBITS_1;
  huart1.Init.Parity = UART_PARITY_NONE;
  huart1.Init.Mode = UART_MODE_TX_RX;
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
  if (HAL_UART_Init(&huart1) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}

/**
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
  __HAL_RCC_GPIOA_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4|GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2, GPIO_PIN_RESET);

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}

/* USER CODE BEGIN 4 */

/* USER CODE END 4 */

/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}

#ifdef  USE_FULL_ASSERT
/**
  * @brief  Reports the name of the source file and the source line number
  *         where the assert_param error has occurred.
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     tex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
#endif /* USE_FULL_ASSERT */
